#!/usr/local/bin/python3


import sqlite3
import gnupg
import re


class Connection(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Connection, cls).__call__(*args, **kwargs)

        return cls._instances[cls]


class DatabaseConnection(metaclass=Connection):

    def __init__(self, file_name=None):
        self.connection = None
        self.connect_database(file_name)
        print(f'We have initialized the database file_name '
              f'for the database connection as {self.connection}')

    def connect_database(self, file_name):
        if file_name is None:
            try:
                self.connection = sqlite3.connect('file::memory:?cache=shared')
            except sqlite3.Error as e:
                print(e)
        else:
            try:
                self.connection = sqlite3.connect('file_name')
            except sqlite3.Error as e:
                print(e)

    def close(self):
        self.connection.close()
        self.connection = None
        print(f'Connection closed = {self.connection}')


class CreateTables:
    """
    The CreateTables is a utility class and holds the data and methods to create tables and database for application.

    Current design of this class is to maintain the SQL strings for creation and
    acts as partial documentation for the the database structure.


    """

    def __init__(self):
        self.entity_sql = """CREATE TABLE IF NOT EXISTS entity(
                    entity_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    identity TEXT,
                    username TEXT,
                    password TEXT,
                    contact_phone TEXT,
                    notes BLOB
                    ); """
        self.questions_sql = """CREATE TABLE IF NOT EXISTS questions(
                            question_id INTEGER NOT NULL,
                            entity_id INTEGER NOT NULL,
                            question TEXT NOT NULL,
                            response TEXT NOT NULL,
                            PRIMARY KEY(question_id, entity_id),
                            FOREIGN KEY (entity_id)
                                REFERENCES entity (entity_id)
                            );"""

    def create_entity(self):
        pass


class Entity:
    """
    The Entity stores information to identify and login to an application or website.

    For each record created or input the members of the Entity store unencrypted values that
    are viewed or edited by the user. As this is designed to be secure.

    Attributes
    ----------
    entity_id : int
        generated by the database or a coroutine I am leaning towards a co-routine if sqlite3 will go with it
    identity: str
        company name for a search parameter
    uname: str
        the username or login ID
    password: str
        the password
    two_factor: int
        whether the website offers two factor authentication 0 = false 1 = true -1 = not available
    contact_phone:
        primary phone number associated with the account
    notes:
        any additional notes
    """

    def __init__(self,
                 entity_id: int = 0,
                 identity: str = '',
                 uname: str = '',
                 password: str = '',
                 two_factor: bool = False,
                 contact_phone: str = '',
                 notes: str = ''):
        """
        For the Entity constructor no values are required upon instantiation of the class.

        Parameters
        ----------
        entity_id: int
            generated by the database used primarily to access records records directly
        identity: str
            website address or application name
        uname: str
            the username or login ID
        password:
            the password
        two_factor:
            whether the website offers two factor authentication,
        contact_phone:
            primary phone number associated with the account
        notes:
            any additional notes
        """

        self.entity_id = entity_id
        self.identity = identity
        self.uname = uname
        self.password = password
        self.two_factor = two_factor
        self.contact_phone = contact_phone
        self.notes = notes

    def __repr__(self):
        return f'''Entity( {self.entity_id}, {self.identity}, {self.uname}, {self.password}, {self.two_factor}, 
                            {self.contact_phone}, {self.notes})'''


class Questions:
    def __init__(self, question_id: int = 0, question: str = '', response: str = '', entity_id: int = 0):
        self.question_id = question_id
        self.question = question
        self.response = response
        self.entity_id = entity_id

    def __repr__(self) -> str:
        return f'''Questions( entity_id: {self.entity_id}, question_id: {self.question_id}, \
                   questions: {self.question}, response: {self.response} )'''


class Name:

    def __init__(self, full_name: str):
        names = full_name.split()
        self.first_name = ''
        self.middle_name = ''
        self.last_name = ''
        if len(names) > 3:
            self.first_name = names[0]
            self.middle_name = ' '.join(names[1:-1])
            self.last_name = names[len(names)-1]
        elif len(names) == 3:
            self.first_name = names[0]
            self.middle_name = names[1]
            self.last_name = names[2]
        elif len(names) == 2:
            self.first_name = names[0]
            self.last_name = names[1]
        else:
            self.first_name = names[0]

    def __str__(self):
        return ' '.join([self.first_name, self.last_name])


if __name__ == '__main__':
    while True:
        print('Enter your name: ', end='')
        username = input()
        name = Name(username)
        print(f'Do you think you are smart {name}? ', end='')
        smart = input()
        if smart == 'No':
            break
